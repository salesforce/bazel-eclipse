/**
 * Copyright (c) 2019, Salesforce.com, Inc. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the
 * following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following
 * disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the
 * following disclaimer in the documentation and/or other materials provided with the distribution.
 *
 * 3. Neither the name of Salesforce.com nor the names of its contributors may be used to endorse or promote products
 * derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 *
 */
package com.salesforce.bazel.sdk.aspect.jvm;

import java.io.File;
import java.util.Objects;

import org.json.simple.JSONObject;

/**
 * A structure containing the set of jar files (interface, class and source jars) generated by a JVM rule target
 * (java_library).
 */
public final class JVMAspectOutputJarSet {
    private String ijar; // interface_jar
    private String jar; // jar
    private String srcjar; // source_jar

    public JVMAspectOutputJarSet(JSONObject arrayObj) {
        JSONObject jarObj = (JSONObject) arrayObj.get("jar");
        if (jarObj != null) {
            String relPath = (String) jarObj.get("relative_path");
            String base = (String) jarObj.get("root_execution_path_fragment");
            if (base != null) {
                jar = base + File.separator + relPath;
            } else {
                jar = relPath;
            }
        }
        JSONObject ijarObj = (JSONObject) arrayObj.get("interface_jar");
        if (ijarObj != null) {
            String base = (String) ijarObj.get("root_execution_path_fragment");
            String relPath = (String) ijarObj.get("relative_path");
            if (base != null) {
                ijar = base + File.separator + relPath;
            } else {
                ijar = relPath;
            }
        }
        JSONObject sjarObj = (JSONObject) arrayObj.get("source_jar");
        if (sjarObj != null) {
            String base = (String) sjarObj.get("root_execution_path_fragment");
            String relPath = (String) sjarObj.get("relative_path");
            if (base != null) {
                srcjar = base + File.separator + relPath;
            } else {
                srcjar = relPath;
            }
        }
    }

    @Override
    public String toString() {
        StringBuffer builder = new StringBuffer();
        builder.append("JavaTargetOutputJars(jar = ").append(jar);
        if (ijar != null) {
            builder.append(", interface_jar = ").append(ijar);
        }
        if (srcjar != null) {
            builder.append(", source_jar = ").append(srcjar);
        }
        return builder.append(")").toString();
    }

    @Override
    public int hashCode() {
        return Objects.hash(ijar, jar, srcjar);
    }

    public String getInterfaceJar() {
        return ijar;
    }

    public String getJar() {
        return jar;
    }

    public String getSrcJar() {
        return srcjar;
    }
}
