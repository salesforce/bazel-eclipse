/**
 * Copyright (c) 2019, Salesforce.com, Inc. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the
 * following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following
 * disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the
 * following disclaimer in the documentation and/or other materials provided with the distribution.
 *
 * 3. Neither the name of Salesforce.com nor the names of its contributors may be used to endorse or promote products
 * derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 *
 */
package com.salesforce.b2eclipse.model;

import java.util.Objects;

import com.google.gson.JsonObject;

/**
 * A structure containing the list of jar files generated by a target (interface, class and source jars).
 */
public final class AspectOutputJars {
    private final String ijar; // interface_jar
    private final String jar; // jar
    private final String srcjar; // source_jar

    AspectOutputJars(JsonObject obj) {
        this.jar = obj.has("jar") ? obj.get("jar").getAsString() : null;
        this.ijar = obj.has("interface_jar") ? obj.get("interface_jar").getAsString() : null;
        this.srcjar = obj.has("source_jar") ? obj.get("source_jar").getAsString() : null;
    }
    
    public AspectOutputJars(String interfaceJar, String outputJar, String srcJar) {
        ijar = interfaceJar;
        jar = outputJar;
        srcjar = srcJar;
    }

    @Override
    public String toString() {
        StringBuffer builder = new StringBuffer();
        builder.append("JavaTargetOutputJars(jar = ").append(jar);
        if (ijar != null) {
            builder.append(", interface_jar = ").append(ijar);
        }
        if (srcjar != null) {
            builder.append(", source_jar = ").append(srcjar);
        }
        return builder.append(")").toString();
    }

    @Override
    public int hashCode() {
        return Objects.hash(ijar, jar, srcjar);
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        AspectOutputJars other = (AspectOutputJars) obj;
        if (ijar == null) {
            if (other.ijar != null) {
                return false;
            }
        } else if (!ijar.equals(other.ijar)) {
            return false;
        }
        if (jar == null) {
            if (other.jar != null) {
                return false;
            }
        } else if (!jar.equals(other.jar)) {
            return false;
        }
        if (srcjar == null) {
            if (other.srcjar != null) {
                return false;
            }
        } else if (!srcjar.equals(other.srcjar)) {
            return false;
        }
        return true;
    }

    public String getInterfaceJar() {
        return ijar;
    }

    public String getJar() {
        return jar;
    }

    public String getSrcJar() {
        return srcjar;
    }
}
